name: Setup and Unpack Boot Image

on:
  workflow_dispatch:

jobs:
  setup-and-unpack:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout repository
        uses: actions/checkout@v3

      - name: Maximize build space
        uses: easimon/maximize-build-space@master
        with:
          root-reserve-mb: 8192
          temp-reserve-mb: 2048
          remove-dotnet: 'true'
          remove-android: 'true'
          remove-haskell: 'true'
          remove-codeql: 'true'

      - name: Download prebuilt toolchain
        run: |
          AOSP_MIRROR=https://android.googlesource.com
          BRANCH=main-kernel-build-2024
          
          # Clone the necessary repositories
          git clone $AOSP_MIRROR/platform/prebuilts/build-tools -b $BRANCH --depth 1 build-tools
          git clone $AOSP_MIRROR/kernel/prebuilts/build-tools -b $BRANCH --depth 1 kernel-build-tools
          git clone $AOSP_MIRROR/platform/system/tools/mkbootimg -b $BRANCH --depth 1 mkbootimg

          # Set environment variables for tools
          export AVBTOOL=$GITHUB_WORKSPACE/kernel-build-tools/linux-x86/bin/avbtool
          export GZIP=$GITHUB_WORKSPACE/build-tools/path/linux-x86/gzip
          export LZ4=$GITHUB_WORKSPACE/build-tools/path/linux-x86/lz4
          export MKBOOTIMG=$GITHUB_WORKSPACE/mkbootimg/mkbootimg.py
          export UNPACK_BOOTIMG=$GITHUB_WORKSPACE/mkbootimg/unpack_bootimg.py

          # Check if the tools are accessible and Python is installed
          echo "Checking if Python is installed"
          if ! command -v python3 &> /dev/null; then
            echo "Error: Python is not installed. Please install Python to continue."
            exit 1
          fi
          
          # Check if avbtool and other tools are available
          echo "Checking if avbtool exists at $AVBTOOL"
          if [ ! -f "$AVBTOOL" ]; then
            echo "Error: avbtool not found at $AVBTOOL."
            exit 1
          fi
          
          echo "Checking if unpack_bootimg.py exists at $UNPACK_BOOTIMG"
          if [ ! -f "$UNPACK_BOOTIMG" ]; then
            echo "Error: unpack_bootimg.py not found at $UNPACK_BOOTIMG."
            exit 1
          fi

          echo "Tools setup complete!"

      - name: Download and Unpack GKI Kernel
        run: |
          # Navigate to the bootimgs directory
          mkdir -p ./bootimgs
          cd ./bootimgs
          
          # Set the GKI URLs
          GKI_URL=https://dl.google.com/android/gki/gki-certified-boot-android12-5.10-"${DATE}"_r1.zip
          FALLBACK_URL=https://dl.google.com/android/gki/gki-certified-boot-android12-5.10-2023-01_r1.zip
          
          # Check if the GKI URL is available
          echo "Checking if GKI kernel URL is reachable: $GKI_URL"
          status=$(curl -sL -w "%{http_code}" "$GKI_URL" -o /dev/null)
          
          if [ "$status" = "200" ]; then
              echo "[+] Downloading from GKI_URL"
              curl -Lo gki-kernel.zip "$GKI_URL"
          else
              echo "[+] $GKI_URL not found, using $FALLBACK_URL"
              curl -Lo gki-kernel.zip "$FALLBACK_URL"
          fi
          
          # Unzip the downloaded kernel and remove the zip
          echo "Unzipping the downloaded kernel..."
          unzip gki-kernel.zip && rm gki-kernel.zip

          # List the contents to check if boot-5.10.img is present
          echo "Listing contents of current directory:"
          ls -l

          # Check if boot-5.10.img exists, and exit if not
          echo "Checking if boot-5.10.img exists..."
          if [ ! -f "./boot-5.10.img" ]; then
            echo "Error: boot-5.10.img not found in the current directory."
            exit 1
          fi

          # Unpack the boot.img using the absolute path
          echo "Unpacking boot.img..."
          FULL_PATH=$(pwd)/boot-5.10.img
          echo "Unpacking using: $FULL_PATH"

          # Check if unpack_bootimg is available
          echo "Checking if unpack_bootimg.py exists at $UNPACK_BOOTIMG"
          if [ ! -f "$UNPACK_BOOTIMG" ]; then
            echo "Error: unpack_bootimg.py tool not found at $UNPACK_BOOTIMG."
            exit 1
          fi

          # Run the unpacking tool
          echo "Running unpack_bootimg.py..."
          python3 "$UNPACK_BOOTIMG" --boot_img="$FULL_PATH"

          echo "Boot image unpacked successfully!"
