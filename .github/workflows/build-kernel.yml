name: Build GKI Kernels With KernelSU-Next & SUSFS

on:
  workflow_dispatch:
    inputs:
      make_release:
        description: 'Do you want to release these kernels?'
        required: true
        type: boolean
        default: false
      build_a12:
        description: 'Build Android 12 kernel?'
        required: true
        type: boolean
        default: true
      build_a13:
        description: 'Build Android 13 kernel?'
        required: true
        type: boolean
        default: true
      build_a14:
        description: 'Build Android 14 kernel?'
        required: true
        type: boolean
        default: true

  push:
    branches:
      - main

jobs:
  build-kernel-a12:
    uses: ./.github/workflows/build-kernel-a12.yml
    secrets: inherit
    if: ${{ github.event.inputs.build_a12 == 'true' || github.event.inputs.build_a12 == '' }}

  build-kernel-a13:
    uses: ./.github/workflows/build-kernel-a13.yml
    secrets: inherit
    if: ${{ github.event.inputs.build_a13 == 'true' || github.event.inputs.build_a13 == '' }}

  build-kernel-a14:
    uses: ./.github/workflows/build-kernel-a14.yml
    secrets: inherit
    if: ${{ github.event.inputs.build_a14 == 'true' || github.event.inputs.build_a14 == '' }}

  trigger-release:
    runs-on: ubuntu-latest
    needs:
      - build-kernel-a12
      - build-kernel-a13
      - build-kernel-a14
    if: ${{ github.event.inputs.make_release == 'true' }}
    env:
      REPO_OWNER: TheWildJames
      REPO_NAME: GKI_KernelSU_SUSFS
      GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v2

      - name: Install GitHub CLI
        run: sudo apt-get install gh -y

      - name: Verify gh Authentication
        run: gh auth status

      - name: Get Latest Tag from GitHub
        id: get_tag
        run: |
          LATEST_TAG=$(gh api repos/$REPO_OWNER/$REPO_NAME/tags --jq '.[0].name')
          if [ -z "$LATEST_TAG" ]; then
            LATEST_TAG="1.5.3-0"
          fi
          NEW_TAG=$(echo "$LATEST_TAG" | awk -F- '{suffix=$2; if (!suffix) suffix=0; suffix++; printf "%s-%d", $1, suffix}')
          echo "TAG_NAME=${NEW_TAG}" >> $GITHUB_ENV

      - name: Define Release Name and Notes
        run: |
          RELEASE_NAME="*TEST BUILD* GKI Kernels With KernelSU & SUSFS v1.5.3 *TEST BUILD*"
          RELEASE_NOTES="This release contains KernelSU and SUSFS v1.5.3

Module: https://github.com/sidex15/ksu_module_susfs

Official Manager:
-> https://github.com/tiann/KernelSU
Non-Official Managers:
-> https://github.com/rifsxd/KernelSU-Next
-> https://github.com/backslashxx/KernelSU
-> https://github.com/rsuntk/KernelSU
-> https://github.com/5ec1cff/KernelSU
-> https://github.com/silvzr/KernelSU
-> https://github.com/sidex15/KernelSU

Features:
[+] KernelSU-Next
[+] SUSFS v1.5.3
[+] Wireguard Support
[+] Maphide LineageOS Detections
[+] Futile Maphide for jit-zygote-cache Detections
[+] Magic Mount Support"

          echo "RELEASE_NAME=$RELEASE_NAME" >> $GITHUB_ENV
          echo "RELEASE_NOTES=$RELEASE_NOTES" >> $GITHUB_ENV

      - name: Download kernel artifacts (A12, A13, A14)
        run: |
          echo "Downloading kernel artifacts"
          mkdir -p ./downloaded-artifacts
          
          if [[ "${{ github.event.inputs.build_a12 }}" == "true" ]]; then
            echo "Downloading kernel artifacts for A12"
            gh release download "$TAG_NAME" --repo "$REPO_OWNER/$REPO_NAME" --name "kernel-artifacts-a12*" --dir ./downloaded-artifacts
          fi

          if [[ "${{ github.event.inputs.build_a13 }}" == "true" ]]; then
            echo "Downloading kernel artifacts for A13"
            gh release download "$TAG_NAME" --repo "$REPO_OWNER/$REPO_NAME" --name "kernel-artifacts-a13*" --dir ./downloaded-artifacts
          fi

          if [[ "${{ github.event.inputs.build_a14 }}" == "true" ]]; then
            echo "Downloading kernel artifacts for A14"
            gh release download "$TAG_NAME" --repo "$REPO_OWNER/$REPO_NAME" --name "kernel-artifacts-a14*" --dir ./downloaded-artifacts
          fi

          for zip_file in ./downloaded-artifacts/*.zip; do
            if [[ -f "$zip_file" ]]; then
              echo "Extracting $zip_file"
              unzip "$zip_file" -d ./downloaded-artifacts
              echo "Deleting $zip_file"
              rm "$zip_file"
            fi
          done

      - name: Create GitHub Release
        run: |
          gh release create "$TAG_NAME" ./downloaded-artifacts/* \
            --repo "$REPO_OWNER/$REPO_NAME" \
            --title "$RELEASE_NAME" \
            --notes "$RELEASE_NOTES" \
            --prerelease \
            --latest=false

      - name: Display Files Uploaded
        run: |
          echo "GitHub release created with the following files:"
          ls ./downloaded-artifacts
