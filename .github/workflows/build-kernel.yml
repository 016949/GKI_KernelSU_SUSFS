name: Build GKI Kernels With KernelSU-Next & SUSFS

on:
  workflow_dispatch:  # Allows triggering manually from the GitHub Actions UI
    inputs:
      make_release:
        description: 'Do you want to release these kernels?'
        required: true
        type: boolean
        default: false  # Default is 'false', meaning no release unless explicitly set
      build_a12:
        description: 'Build Android 12 kernel?'
        required: true
        type: boolean
        default: true
      build_a13:
        description: 'Build Android 13 kernel?'
        required: true
        type: boolean
        default: true
      build_a14:
        description: 'Build Android 14 kernel?'
        required: true
        type: boolean
        default: true

  push:  # Allows triggering on push to the repository
    branches:
      - main  # Only triggers on pushes to the 'main' branch

jobs:
  # Build Android 12 GKI Kernel
  build-kernel-a12:
    uses: ./.github/workflows/build-kernel-a12.yml
    secrets: inherit
    if: ${{ github.event.inputs.build_a12 == 'true' || github.event.inputs.build_a12 == '' }}

  # Build Android 13 GKI Kernel
  build-kernel-a13:
    uses: ./.github/workflows/build-kernel-a13.yml
    secrets: inherit
    if: ${{ github.event.inputs.build_a13 == 'true' || github.event.inputs.build_a13 == '' }}

  # Build Android 14 GKI Kernel
  build-kernel-a14:
    uses: ./.github/workflows/build-kernel-a14.yml
    secrets: inherit
    if: ${{ github.event.inputs.build_a14 == 'true' || github.event.inputs.build_a14 == '' }}


  # Trigger Release Job
  trigger-release:
    runs-on: ubuntu-latest
    needs:
      - build-kernel-a12
      - build-kernel-a13
      - build-kernel-a14
    if: ${{ github.event.inputs.make_release == 'true' }}  # Only trigger if make_release is true
    steps:
      - name: Checkout code
        uses: actions/checkout@v2

      - name: Get Latest Tag from GitHub
        id: get_tag
        run: |
          REPO_OWNER="TheWildJames"
          REPO_NAME="GKI_KernelSU_SUSFS"
          # Get the latest release tag from the GitHub repository
          LATEST_TAG=$(gh api repos/$REPO_OWNER/$REPO_NAME/tags --jq '.[0].name')
          if [ -z "$LATEST_TAG" ]; then
            LATEST_TAG="1.5.3-0"
          fi
          # Increment the suffix after the dash (if needed)
          NEW_TAG=$(echo "$LATEST_TAG" | awk -F- '{suffix=$2; if (!suffix) suffix=0; suffix++; printf "%s-%d", $1, suffix}')
          echo "TAG_NAME=${NEW_TAG}" >> $GITHUB_ENV

      - name: Define Release Name and Notes
        run: |
          RELEASE_NAME="*TEST BUILD* GKI Kernels With KernelSU & SUSFS v1.5.3 *TEST BUILD*"
          RELEASE_NOTES="This release contains KernelSU and SUSFS v1.5.3, including the GKI Kernel builds for Android 12, 13, and 14."

          echo "RELEASE_NAME=$RELEASE_NAME" >> $GITHUB_ENV
          echo "RELEASE_NOTES=$RELEASE_NOTES" >> $GITHUB_ENV

      - name: Download kernel artifacts (A12, A13, A14)
        run: |
          echo "Downloading kernel artifacts"
          mkdir -p ./downloaded-artifacts
          
          if [ "${{ github.event.inputs.build_a12 }}" == "true" ]; then
            echo "Downloading kernel artifacts for A12"
            gh release download "$TAG_NAME" --repo "$REPO_OWNER/$REPO_NAME" --name "kernel-artifacts-a12*" --dir ./downloaded-artifacts
          fi

          if [ "${{ github.event.inputs.build_a13 }}" == "true" ]; then
            echo "Downloading kernel artifacts for A13"
            gh release download "$TAG_NAME" --repo "$REPO_OWNER/$REPO_NAME" --name "kernel-artifacts-a13*" --dir ./downloaded-artifacts
          fi

          if [ "${{ github.event.inputs.build_a14 }}" == "true" ]; then
            echo "Downloading kernel artifacts for A14"
            gh release download "$TAG_NAME" --repo "$REPO_OWNER/$REPO_NAME" --name "kernel-artifacts-a14*" --dir ./downloaded-artifacts
          fi

      - name: Create GitHub Release
        run: |
          # Create the GitHub release
          gh release create "$TAG_NAME" ./downloaded-artifacts/* \
            --repo "$REPO_OWNER/$REPO_NAME" \
            --title "$RELEASE_NAME" \
            --notes "$RELEASE_NOTES" \
            --prerelease \
            --latest=false

      - name: Display Files Uploaded
        run: |
          echo "GitHub release created with the following files:"
          ls ./downloaded-artifacts
